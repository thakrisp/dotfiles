---
- name: Configure Workstation Base System
  hosts: localhost
  connection: local

  vars:
    dotfiles_dir: "{{ ansible_env.HOME }}/dotfiles"
    config_dir: "{{ ansible_env.HOME }}/.config"

  tasks:
    - name: "Print Run Parameters"
      ansible.builtin.debug:
        msg:
          - "playbook started at {{ ansible_date_time.iso8601 }}"
          - "Dotfiles Repo: {{ dotfiles_repo }}"
          - "Test Mode: {{ is_test_run }}"
          - "CI Mode: {{ is_ci_run }}"

    - name: "Install Zsh via Homebrew"
      community.general.homebrew:
        name: zsh
        state: present

    - name: "Set Zsh as the default shell"
      become: yes # Requires sudo
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: "{{ '/opt/homebrew/bin/zsh' if ansible_os_family == 'Darwin' else '/home/linuxbrew/.linuxbrew/bin/zsh' }}"
      when: "'zsh' not in ansible_user_shell"

    - name: "Install Oh My Zsh"
      ansible.builtin.shell:
        cmd: 'CHSH=no RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'
        creates: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: "Ensure .config directory exists"
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        mode: '0755'

    - name: "Symlink dotfiles to home directory"
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/{{ item.src }}"
        dest: "{{ ansible_env.HOME }}/{{ item.dest }}"
        state: link
        force: yes
      loop:
        - { src: '.zshrc', dest: '.zshrc' }
        - { src: '.tmux.conf', dest: '.tmux.conf' }

    - name: "Clone Neovim configurations"
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ config_dir }}/{{ item.dest }}"
        version: "{{ item.branch | default('main') }}"
      loop:
        - { repo: 'https://github.com/LazyVim/starter', dest: 'LazyVim' }
        - { repo: 'https://github.com/NvChad/starter', dest: 'NvChad' }
        - { repo: 'https://github.com/nvim-lua/kickstart.nvim.git', dest: 'KickstartNVIM', branch: "master" }

    - name: "Install NVM (Node Version Manager)"
      ansible.builtin.shell:
        cmd: 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash'
      args:
        creates: "{{ ansible_env.HOME }}/.nvm"
      changed_when: true # Because the script manages its own changes, we tell Ansible it always "changes" things if it runs.

    - name: "Install pyenv (Python Version Manager)"
      ansible.builtin.shell:
        cmd: 'curl https://pyenv.run | bash'
      args:
        # This task will be SKIPPED if the ~/.pyenv directory already exists.
        creates: "{{ ansible_env.HOME }}/.pyenv"
      changed_when: true

- name: "Import the application installation playbook"
  ansible.builtin.import_playbook: install_apps.yml
