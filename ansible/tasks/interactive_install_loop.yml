---
# This file is executed once for each application in the `casks_list`.
# The application's name is available as the 'app_name' variable.

- name: "Prompt for action on '{{ app_name }}'"
  ansible.builtin.pause:
    prompt: |
      -------------------
        Processing GUI App: {{ app_name }}
      -------------------
      Choose an action:
        (i) - Install with a custom command
        (s) - Skip this application for now
        (d) - Done (mark as already installed)
      
      Your choice
  register: user_action

# This 'block' groups all the logic for handling the user's choice.
# The 'rescue' part ensures that if the user's command fails badly,
# we can still log it as a failure.
- name: "Handle user choice for '{{ app_name }}'"
  block:
    # This task only runs if the user chose 'i' for install.
    - name: "Get install command from user"
      when: user_action.user_input | lower == 'i'
      ansible.builtin.pause:
        prompt: "  Enter the command to install '{{ app_name }}'"
      register: install_command

    # This task also only runs if the user chose 'i' AND they actually entered a command.
    - name: "Execute install command"
      when: user_action.user_input | lower == 'i' and install_command.user_input is defined and install_command.user_input != ""
      ansible.builtin.shell: "{{ install_command.user_input }}"
      register: command_result # Register the success/failure of the command.

    # --- LOGGING THE OUTCOME ---

    # Log a successful installation.
    - name: "Log successful installation"
      ansible.builtin.lineinfile:
        path: "{{ log_filename }}"
        line: "[✅] {{ app_name }} - Installed"
        create: yes
        mode: '0644'
      when: user_action.user_input | lower == 'i' and command_result is defined and command_result.rc == 0

    # Log a failed installation.
    - name: "Log failed installation"
      ansible.builtin.lineinfile:
        path: "{{ log_filename }}"
        line: "[❌] {{ app_name }} - Install command failed"
        create: yes
        mode: '0644'
      when: user_action.user_input | lower == 'i' and command_result is defined and command_result.rc != 0

  rescue:
    # This runs if the 'shell' command itself errors out.
    - name: "Log installation failure (critical error)"
      ansible.builtin.lineinfile:
        path: "{{ log_filename }}"
        line: "[❌] {{ app_name }} - Install command failed critically"
        create: yes
        mode: '0644'

# This task runs ONLY if the user chose 'd' for done.
- name: "Log 'done' status"
  ansible.builtin.lineinfile:
    path: "{{ log_filename }}"
    line: "[✅] {{ app_name }} - Marked as installed"
    create: yes
    mode: '0644'
  when: user_action.user_input | lower == 'd'

# This task runs ONLY if the user chose 's' for skip.
- name: "Log 'skipped' status"
  ansible.builtin.lineinfile:
    path: "{{ log_filename }}"
    line: "[↪️] {{ app_name }} - Skipped by user"
    create: yes
    mode: '0644'
  when: user_action.user_input | lower == 's'
